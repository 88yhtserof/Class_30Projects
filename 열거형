//22. 열거형 enumeration
/*
 연관성이 있는 값을 모아놓은 것을 말한다.
 열거형의 각 항목은 그 자체로 하나의 값이다.
 자체로도 하나의 값이지만 원시값을 가질 수 있다.
 열거형은 연관값도 가질 수 있다. - 열거형 내 항목이 자신과 연관된 값을 가질 수 있다.
 */

//열거형은 하나의 타입으로 사용할 수 있다.
enum CompassPoint: String {
    case north = "북"
    case south = "남"
    case east = "동"
    case west = "서"
}

var direction = CompassPoint.east
direction = .west //direction 변수가 CompassPoint로 타입추론되었기 때문에 이러한 방식으로 사용 가능

//열거형은 switch 구문과 사용하면 다양하게 활용할 수 있다.
switch direction {
case .north:
    print(direction.rawValue)
case .south:
    print(direction.rawValue)
case .east:
    print(direction.rawValue)
case .west:
    print(direction.rawValue)
}

//원시값을 가지고 열거형을 반환하게 할 수도 있다.
//열거형 인스턴스를 생성할 때 매개변수로 원시값을 넘겨주면 된다.
 let direction2 = CompassPoint(rawValue: "남") //direction2의 열거형 항목으로 "남" 인수값과 원시값이 대응하는 south 항목이 할당된다.


//열거형의 연관값
enum PhoneError {
    case unknown
    case batteryLow(String)
}

let error = PhoneError.batteryLow("배터리가 곧 방전됩니다.")
//연관값을 추출하려면 if case..? 또는 switch문 사용
switch error {
case .batteryLow(let message): //연관값을 넘겨받을 수 있는 상수 선언
    print(message)
case .unknown:
    print("알 수 없는 에러입니다.")
}
