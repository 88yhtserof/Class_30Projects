//15. 프로퍼티
/*
 클래스, 구조체 또는 열거형 등에 관련된 값을 뜻한다
 인스턴스에 소속된 변수 및 습성
 저장 프로퍼티-변수 또는 상수
 연산 프로퍼티-특정 연산을 실행하는 결과값
 타입 프로퍼티- 특정 타입에서 사용되는 프로퍼티
 */

//저장 프로퍼티
//구조체 또는 클래스에서 사용 가능
//인스턴스의 프로퍼티에 값이 저장되는걸 저장 프로퍼티라고 한다
struct Cat {
    var name: String
    let gender: String //상수이므로 값 변경 불가
}

var cat = Cat(name: "cat", gender: "Female")
print(cat)

let cat2 = Cat(name: "cat2", gender: "Male")
//구조체가 값 타입이기 때문에 구조체 인스턴스를 상수로 선언하면 내부 프로퍼티도 상수가 되서 수정 불가하다.
//클래스는 참조 타입이기 때문에 클래스의 인스턴스를 상수로 선언해도 변수로 선언된 내부 프로퍼티는 수정이 가능하다.


//연산 프로퍼티
//구조체, 클래스, 열거형에서 사용 가능
//getter, setter를 이용하여 값을 연산하고 프로퍼티에 전달해주는 것이 연산 프로퍼티이다.
struct Stock {
    var averagePrice: Int
    var quntity: Int
    var purachasePrice: Int {
        get{//get만 작성하면 읽기전용 프로퍼티가 된다.
            return averagePrice * quntity
        }
        set(newPrice) { //매개변수를 생략하고 매개변수 대신에 newValue라는 이름으로 사용할 수 있다.
            averagePrice = newPrice / quntity
        }
    }
}
var stock = Stock(averagePrice: 2300, quntity: 3)
print(stock)
stock.purachasePrice //get 실행
stock.purachasePrice = 3000 //set 실핼
stock.averagePrice


//property Observers 프로퍼티 감시자
//프로퍼티의 값을 변화를 관찰하고 반영한다. 프로퍼티가 set 될 때마다 호출된다.
//사용 가능 경우, 저장 프로퍼티와 오버라이드된 저장 프로퍼티와 연산 프로퍼티
class Account {
    var credit: Int = 0 {
        //소괄호 이름 지정
        willSet {//값이 저장되기 직전에 호출되는 Observers
            print("잔액이 \(credit)원에서 \(newValue)원으로 변경될 예정입니다.")
        }
        didSet { //값이 저장된 직후 호출되는 Observes
            print("잔액이 \(oldValue)원에서 \(credit)원으로 변경되었습니다.")
        }
    }
}

var account = Account()
account.credit = 100
//잔액이 0원에서 100원으로 변경될 예정입니다.
//잔액이 0원에서 100원으로 변경되었습니다.


//타입 프로퍼티
//인스턴스 생성없이 객체 내 프로퍼티에 접근을 가능하게 하는 것
//프로퍼티 타입 자체와 연결하는 것을 의미한다.
struct SomeStructure {
    static var storedTypreProperty = "Some Value" //static 키워드로 타입 프로퍼티 설정
    static var computeTypeProperty: Int { //static 키워드로 타입 프로퍼티 생성
        return 1
    }
}

//별도의 인스턴스 생성 없이 타입 프로퍼티에 접근 가능하다.
//값 변경도 가능하다. -> 문법 책) 인스턴스의 프로퍼티 값이 변경되는 것이 아니라, 객체 자체의 값이 변경되는 것이기 때문에 모든 인스턴스에 영향을 미친다.
