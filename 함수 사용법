//7. 함수 사용법
/*
 작업의 가장 작은 단위이자 코드의 집합. 반복적인 작업을 피하기 위해 사용
 하나의 기능 하나의 함수
 */

func sum(a: Int, b: Int) -> Int {
    return a+b
}
sum(a: 10, b: 20)

func hello() -> String {
    return "Hello!"
}
hello()

func printHi() {
    print("Hi")
}
printHi()

//default 값 설정하기
func greeting(friend: String, me: String = "yh") {
    print("Hello, \(friend)! I'm \(me)")
}

greeting(friend: "tw")

//전달인자 레이블 사용 -> 함수 사용자가 매개변수의 역할을 명확하게 이해하고 사용할 수 있다. 가독성 좋음
//와일드 카드 식별자(_)를 사용하면 전달인자 레이블을 전달하지 않는 함수를 만들 수 있다.
//가변 매개변수는 여러 인자를 넘겨줄 수 있다. 배열을 넘겨주는 형식
func sendMessage(_ myName: String, to name: String...) -> String {
    return"Hello \(name)! I'm \(myName)"
}
sendMessage("yh", to: "a", "b")


//스위프트는 함수형 프로그래밍 패러다임을 포함하는 다중 패러다임 형식이라 함수를 일급객체로 여긴다.따라서 함수를 상수나 변수에 할당할 수 있고, 매개변수를 통해 전달 가능하다.
